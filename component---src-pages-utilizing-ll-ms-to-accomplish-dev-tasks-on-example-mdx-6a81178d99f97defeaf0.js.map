{"version":3,"file":"component---src-pages-utilizing-ll-ms-to-accomplish-dev-tasks-on-example-mdx-6a81178d99f97defeaf0.js","mappings":"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","sources":["webpack://learning-architect.blog/./src/pages/utilizing-LLMs-to-accomplish-dev-tasks-on-example.mdx","webpack://learning-architect.blog/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\n/*cut*/\n/*cut*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    ol: \"ol\",\n    li: \"li\",\n    strong: \"strong\",\n    a: \"a\",\n    h2: \"h2\",\n    h3: \"h3\",\n    em: \"em\",\n    span: \"span\",\n    ul: \"ul\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"Exploring how to utilize LLMs to speedup development\"), \"\\n\", \"\\n\", React.createElement(_components.p, null, \"Recently, I got tasked with integrating another internal API into an LLM-based agent that I was working on. The application already had several APIs connected, but this new addition was crucial, and I was looking for a way to automate the integration process. The challenge wasn’t just about hooking up the API—it was about transforming the complex internal structures into something more digestible for the LLM. Basically, the API needed a makeover: stripping out internal entities, identifiers, and making the data coherent and contextually relevant for the AI.\"), \"\\n\", React.createElement(_components.p, null, \"Now, generally speaking, adding a new API is a pretty clear-cut process—parse the endpoints, connect the dots, and fit it into the application. But it's also a time-consuming routine. It’s not just about writing the code but ensuring everything aligns perfectly, which eats up a lot of time, especially when scaling this up to integrate more APIs quickly. We wanted to simplify this routine, making it more efficient and repeatable.\"), \"\\n\", React.createElement(_components.p, null, \"I’ve been using GitHub Copilot and ChatGPT extensively in my coding routine, and they’ve been great. But for this task, I wanted to see if there was a better, more streamlined way. That’s when I decided to experiment with Cursor Editor and a custom script approach, hoping they could give me that extra edge.\"), \"\\n\", \"\\n\", React.createElement(_components.p, null, \"Integrating an API into a project typically involves four key components:\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"API Client\"), \": Allows code to make requests to the API and understand its contracts.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Function Definition\"), \": A JSON schema of input parameters needed for OpenAI tools integration, as detailed in the \", React.createElement(_components.a, {\n    href: \"https://platform.openai.com/docs/guides/function-calling/parallel-function-calling\"\n  }, \"OpenAI function calling guide\"), \".\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Function Implementation\"), \": The actual code that performs the required operations.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Tests\"), \": Ensures the function works as intended and supports future updates.\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"Tool #1: Cursor Editor\"), \"\\n\", React.createElement(_components.h3, null, \"Getting Started\"), \"\\n\", React.createElement(_components.p, null, \"I kicked things off with \", React.createElement(_components.a, {\n    href: \"https://www.trycursor.com\"\n  }, \"Cursor Editor\"), \", which, if you haven’t heard of it, is like a supercharged version of an IDE with AI baked in. It’s got this cool feature where it can read the codebase and provide insights into what’s going on. It’s kinda like having a buddy who knows just enough to help but still needs some guidance. So, I enabled code embeddings in Cursor, which gave me a broad picture of the project but no clear path on what I actually needed to do.\"), \"\\n\", React.createElement(_components.p, null, \"When it came to generating code, I used \", React.createElement(_components.a, {\n    href: \"https://www.npmjs.com/package/openapi-typescript-codegen\"\n  }, \"openapi-typescript-codegen\"), \" for the basic models and let Cursor handle the heavy lifting of generating the API client. It was surprisingly good at piecing together most of the code, even catching some missing API requests, which was nice. But it wasn’t all smooth sailing—some requests still had to be adjusted manually.\"), \"\\n\", React.createElement(_components.h3, null, \"Trying to Get Things Done\"), \"\\n\", React.createElement(_components.p, null, \"My first approach was simple: I just asked it to generate a function that could update or set some records, and… well, it didn’t exactly get the job done. The code it spit out was generic and often missed the context, which felt like talking to someone who heard the words but didn’t quite get the meaning.\"), \"\\n\", React.createElement(_components.p, null, \"But after tweaking my prompt and adding more detail, I got something that almost worked. For example, I told it to create, update, or delete records while being careful with destructive operations (basically, keeping the old state so I could roll back if needed). The results were better, but still, there were parts where the AI kinda stumbled and needed some hand-holding to make the logic work correctly.\"), \"\\n\", React.createElement(_components.p, null, \"One cool feature I found was the inline adjustments you could make using CTRL+K on selected code. It’s like having your very own pair programming assistant who doesn’t mind being bossed around—perfect for making step-by-step improvements. But honestly, even though it sped up the process a lot compared to doing everything manually, it wasn’t fully predictable. Some days, you get a lot of the code right on the first go; other days, you’re buried in hidden bugs that can drain your time.\"), \"\\n\", React.createElement(_components.h3, null, \"The Cursor Editor Experience\"), \"\\n\", React.createElement(_components.p, null, \"Initially, Cursor Editor creates a noticeable \\\"Wow\\\" effect. However, as you work with it more, the excitement fades, and it starts to feel like a Copilot-powered IDE.\"), \"\\n\", React.createElement(_components.p, null, \"But there are some standout features that make it worth using:\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Predictive Suggestions\"), \": Cursor does this cool thing where it guesses what else you might need to change when you tweak one part of your code. Sometimes, it’s spot on and feels like magic. Other times, not so much, but it’s still a nice touch.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Inline Prompts and Adjustments (CTRL + K)\"), \": This was the real star for me. You highlight a bit of code, tell Cursor what you want, and it does it. It’s like having a super chill coworker who never gets tired of your constant “Hey, can you fix this?” requests.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Model Switching and Using Claude\"), \": The fact that you can swap models like changing channels is awesome. Claude’s great with larger contexts and code generation, and it’s right there without the hassle of setting up your own account.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"Tool #2: OpenAI-Based Script\"), \"\\n\", React.createElement(_components.p, null, \"The second tool in my bag of tricks was this script I whipped up with OpenAI’s help. The idea was for it to generate the function implementations directly—basically automating the boring bits. I brainstormed with ChatGPT, and it threw an estimate of 27 days to get the whole script right. That’s when I almost gave up, because the biggest challenge wasn’t writing the code itself but feeding the AI enough context so it wouldn’t mess up.\\nInstead of getting bogged down with parsing the whole OpenAPI spec, I decided to take a different approach. I generated TypeScript models directly from the OpenAPI specification and then wrote a TypeScript class—an API client—using those models. But instead of defining every possible endpoint, I focused on including only the methods I actually needed. This way, I kept things lean and focused, which made it easier for the AI to handle.\"), \"\\n\", React.createElement(_components.p, null, \"The next part of the plan was to leverage this TypeScript API client as the entry point. I used the TypeScript compiler API to gather all the dependencies and relevant source code from the models used within the client. Once I had that neatly packaged, I fed it into the OpenAI ChatGPT-4 model as context. By providing this precise input, I was able to guide the AI more effectively and generate relevant code snippets without drowning in irrelevant details.\"), \"\\n\", React.createElement(_components.p, null, \"ChatGPT was quick to generate the code, but debugging and refining took a couple of hours. Still, this approach made it way easier to control what the AI was working with, and once I got through the initial setup, writing prompts to get the rest of the code became pretty straightforward.\"), \"\\n\", React.createElement(_components.p, null, \"Still, the quality of the API docs and the interfaces mattered a lot. Some parts of the API were confusing, even for the AI—like when it didn’t understand that a random string was just a synthetic ID. Sometimes, you have to spell things out to the AI, which can be a little annoying but still way faster than doing everything from scratch.\"), \"\\n\", React.createElement(_components.p, null, \"Below is a simplified version of the script I used to generate the function definition, implementation, and unit tests for the records management function. I omitted many details, \", React.createElement(_components.em, null, \"very\"), \" simplified prompts, and it is generalized to give you an idea of the process:\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"typescript\\\"><pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">import</span> OpenAI <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'openai'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">as</span> fs <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> path <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'path'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">collectTsCodeFromDependencies</span><span class=\\\"token punctuation\\\">(</span>filePath<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">string</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// Logic to read and parse TypeScript files from dependencies would go here</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token template-string\\\"><span class=\\\"token template-punctuation string\\\">`</span><span class=\\\"token string\\\">// Mock content collected from </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>filePath<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token template-punctuation string\\\">`</span></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// Pretty familiar code for those who works with OpenAI API</span>\\n<span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">runOpenAIGeneration</span><span class=\\\"token punctuation\\\">(</span>prompt<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">,</span> openAiClient<span class=\\\"token operator\\\">:</span> OpenAI<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> response <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> openAiClient<span class=\\\"token punctuation\\\">.</span>chat<span class=\\\"token punctuation\\\">.</span>completions<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">create</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n        model<span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">'gpt-4o'</span><span class=\\\"token punctuation\\\">,</span>\\n        messages<span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">{</span> role<span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">'user'</span><span class=\\\"token punctuation\\\">,</span> content<span class=\\\"token operator\\\">:</span> prompt <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> response<span class=\\\"token punctuation\\\">.</span>choices<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>m<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> m<span class=\\\"token punctuation\\\">.</span>message<span class=\\\"token operator\\\">?.</span>content <span class=\\\"token operator\\\">||</span> <span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'\\\\n'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> openAiClient <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">OpenAI</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> apiKey<span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">'your-api-key'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> apiClientPath <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'./path/to/yourApiClient.ts'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> functionDefinitionExamplePath <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'./path/to/exampleFunctionDefinition.ts'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// Collecting TypeScript context from dependencies</span>\\n<span class=\\\"token keyword\\\">const</span> apiClientContent <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">collectTsCodeFromDependencies</span><span class=\\\"token punctuation\\\">(</span>apiClientPath<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> exampleFunctionDefinitionContent <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">collectTsCodeFromDependencies</span><span class=\\\"token punctuation\\\">(</span>functionDefinitionExamplePath<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> functionName <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'manageRecords'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> functionLogic <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'The function should manage records, allowing for operations such as creating, updating, and deleting records.'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> basicPrompt <span class=\\\"token operator\\\">=</span> <span class=\\\"token template-string\\\"><span class=\\\"token template-punctuation string\\\">`</span><span class=\\\"token string\\\">You are generating TypeScript code for a records management application.\\nThe function logic is as follows:\\n</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>functionLogic<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">\\n\\nAPI Client Code:\\n</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>apiClientContent<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token template-punctuation string\\\">`</span></span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> functionDefinitionPrompt <span class=\\\"token operator\\\">=</span> <span class=\\\"token template-string\\\"><span class=\\\"token template-punctuation string\\\">`</span><span class=\\\"token string\\\">\\n</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>basicPrompt<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">\\n\\nFunction Definition Example:\\n</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>exampleFunctionDefinitionContent<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">\\n\\n====\\nGenerate a function definition using the above API client code and function definition example.</span><span class=\\\"token template-punctuation string\\\">`</span></span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> functionDefinition <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">runOpenAIGeneration</span><span class=\\\"token punctuation\\\">(</span>functionDefinitionPrompt<span class=\\\"token punctuation\\\">,</span> openAiClient<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> functionDefinitionPath <span class=\\\"token operator\\\">=</span> path<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>path<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./path/to/save'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token template-string\\\"><span class=\\\"token template-punctuation string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>functionName<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">.ts</span><span class=\\\"token template-punctuation string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nfs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">writeFileSync</span><span class=\\\"token punctuation\\\">(</span>functionDefinitionPath<span class=\\\"token punctuation\\\">,</span> functionDefinition<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> flag<span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">'w'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> exampleFunctionImplementationPath <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'./path/to/exampleFunctionImplementation.ts'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> exampleFunctionImplementationContent <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">collectTsCodeFromDependencies</span><span class=\\\"token punctuation\\\">(</span>exampleFunctionImplementationPath<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> functionImplementationPrompt <span class=\\\"token operator\\\">=</span> <span class=\\\"token template-string\\\"><span class=\\\"token template-punctuation string\\\">`</span><span class=\\\"token string\\\">\\n</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>basicPrompt<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">\\n\\nFunction Definition:\\n</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>functionDefinition<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">\\n\\nExample Function Implementation:\\n</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>exampleFunctionImplementationContent<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">\\n\\n====\\nGenerate a function implementation based on the function definition.</span><span class=\\\"token template-punctuation string\\\">`</span></span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> functionImplementation <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">runOpenAIGeneration</span><span class=\\\"token punctuation\\\">(</span>functionImplementationPrompt<span class=\\\"token punctuation\\\">,</span> openAiClient<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> functionImplementationPath <span class=\\\"token operator\\\">=</span> path<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>path<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./path/to/save'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token template-string\\\"><span class=\\\"token template-punctuation string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>functionName<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">.ts</span><span class=\\\"token template-punctuation string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nfs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">writeFileSync</span><span class=\\\"token punctuation\\\">(</span>functionImplementationPath<span class=\\\"token punctuation\\\">,</span> functionImplementation<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> flag<span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">'w'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> functionTestsPrompt <span class=\\\"token operator\\\">=</span> <span class=\\\"token template-string\\\"><span class=\\\"token template-punctuation string\\\">`</span><span class=\\\"token string\\\">\\n</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>basicPrompt<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">\\n\\nFunction Implementation:\\n</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>functionImplementation<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">\\n\\n====\\nGenerate unit tests for the function implementation using Jest.</span><span class=\\\"token template-punctuation string\\\">`</span></span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> functionTests <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">runOpenAIGeneration</span><span class=\\\"token punctuation\\\">(</span>functionTestsPrompt<span class=\\\"token punctuation\\\">,</span> openAiClient<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> functionTestsPath <span class=\\\"token operator\\\">=</span> path<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>path<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./path/to/tests'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token template-string\\\"><span class=\\\"token template-punctuation string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>functionName<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">.test.ts</span><span class=\\\"token template-punctuation string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nfs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">writeFileSync</span><span class=\\\"token punctuation\\\">(</span>functionTestsPath<span class=\\\"token punctuation\\\">,</span> functionTests<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> flag<span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">'w'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h3, null, \"Important Note on Prompts\"), \"\\n\", React.createElement(_components.p, null, \"The prompts used in the script above are quite simplified. In reality, it took about an hour to fine-tune them to generate code that was both modifiable and clear. Here's what I needed to clarify and specify:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Detailed explanations of the API's functionality, especially where it isn't obvious from names or contracts.\"), \"\\n\", React.createElement(_components.li, null, \"Definitions of terms unique to the domain that might not be familiar to the LLM.\"), \"\\n\", React.createElement(_components.li, null, \"Instructions on libraries and non-standard practices used in the project.\"), \"\\n\", React.createElement(_components.li, null, \"Guidelines on how to write tests that are easy to maintain and update.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"As you might imagine those are time-consuming, but at least partially reusable for the next tasks.\"), \"\\n\", React.createElement(_components.h3, null, \"Results of the script\"), \"\\n\", React.createElement(_components.p, null, \"Well, the script worked. OpenAI was able to generate the function definition, implementation, and even the unit tests. But it wasn’t perfect.\"), \"\\n\", React.createElement(_components.p, null, \"First of all TypesScript code was not correct everywhere. I had to fix manually compilation, sometimes adding missing details and make code compliant with the project lint rules.\"), \"\\n\", React.createElement(_components.p, null, \"Next the tests required to tune a lot to make them runnable. Tests itself were missed the cases I needed, but when initially generated bunch was fixed, but old buddy Copilot was able to help to add more cases.\"), \"\\n\", React.createElement(_components.p, null, \"Then I finally was able to fix logic, and make it work as expected.\\nI had to spend a couple of hours debugging and fixing the generated code, especially around the API client.\\nThe API itself was a bit of a mess, which didn’t help.\"), \"\\n\", React.createElement(_components.h2, null, \"Final Thoughts\"), \"\\n\", React.createElement(_components.p, null, \"So, what would I recommend?\"), \"\\n\", React.createElement(_components.p, null, \"The ability to generate code with LLMs is impressive, but it still has limitations and can be confusing in larger contexts. However, it's far from useless. Scripts like the one created here are valuable for repetitive tasks where traditional code generation methods fall short.\"), \"\\n\", React.createElement(_components.p, null, \"In my view, you need a substantial number of similar tasks to justify the time spent creating such scripts. While LLMs can fill a niche in automating logic code generation, expect to spend time fixing issues in the generated code. Simpler logic generally results in fewer mistakes, but more complex logic will require more effort to correct.\"), \"\\n\", React.createElement(_components.p, null, \"For most cases, using LLMs through the Copilot-like extensions to generate smaller code snippets and then gradually integrating and refining them is a more reliable and scalable approach. This method suits the current state of LLMs better. As LLMs improve in reasoning and handling larger contexts, their ability to generate comprehensive code in a single step will also become more dependable. We'll have to see how this evolves in the future.\"), \"\\n\", React.createElement(_components.p, null, \"What about Cursor? If you’re a developer using VS Code or any AI-assisted tool like Copilot, Cursor Editor is definitely worth a shot. It has some unique features that can save you a bunch of time, especially for making quick adjustments and working with larger codebases. It’s not perfect, but it’s a nice extra tool to have on your belt. But I bet that Copilot will catch up with some of the features soon. It looks like a race of features right now, and it is up to you to decide which tool gives more value in the current moment.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","ol","li","strong","a","h2","h3","em","span","ul","_provideComponents","components","React","href","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}