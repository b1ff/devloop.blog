{"version":3,"sources":["webpack://learning-architect.blog/./src/pages/architect-team-discussions-part-1.mdx","webpack://learning-architect.blog/./src/components/DefaultPageLayout.tsx","webpack://learning-architect.blog/./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","webpack://learning-architect.blog/./src/common/formatDate.ts","webpack://learning-architect.blog/./src/components/RecentPublications.tsx","webpack://learning-architect.blog/./src/components/About.tsx","webpack://learning-architect.blog/./src/components/WithSidebarLayout.tsx"],"names":["_frontmatter","layoutProps","MDXLayout","children","WithSidebarLayout","className","MDXContent","components","props","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","mdxType","parentName","isMDXComponent","formatDate","strDate","Date","toLocaleDateString","RecentPublications","posts","useStaticQuery","allMdx","nodes","map","post","frontmatter","date","href","slug","headings","value","About"],"mappings":"uPAQaA,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,ECFS,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACjB,OACC,gBAACC,EAAA,EAAD,KACC,2BAASC,UAAU,WACjBF,KDDU,SAASG,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,EEfU,SAAuCC,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IAEIE,EAAKC,EAFLC,EAAS,GACTC,EAAaC,OAAOC,KAAKP,GAG7B,IAAKG,EAAI,EAAGA,EAAIE,EAAWG,OAAQL,IACjCD,EAAMG,EAAWF,GACbF,EAASQ,QAAQP,IAAQ,IAC7BE,EAAOF,GAAOF,EAAOE,IAGvB,OAAOE,EFIN,mBACD,OAAO,QAACX,EAAD,iBAAeD,EAAiBO,EAAhC,CAAuCD,WAAYA,EAAYY,QAAQ,eAG5E,gEACA,kBAAG,cAAIC,WAAW,KAAf,2aAKH,8BACA,yYAIA,4RAGA,+ZAIA,6IAEA,6DACA,4DACA,oKAEA,wbAIA,6JAEA,iKAEA,2HACA,iDACA,uEACA,2EACA,gFACA,yKAEA,yCACA,qVAIA,mDACA,mSAGA,mBACH,mDACA,8EAEG,oLAEA,+DACA,+MAEA,4OAEA,8XAIA,0PAGA,8CACA,2GACA,mCACA,kBAAG,eAAKA,WAAW,KAAhB,uIAEH,4XAIA,6FACA,mBACE,cAAIA,WAAW,MAAf,+EACA,cAAIA,WAAW,MAAf,8DAEF,6KAEA,mCACA,kBAAG,eAAKA,WAAW,KAAhB,0ZAIH,2ZAIA,qGACA,mBACE,cAAIA,WAAW,MAAf,mIAEA,cAAIA,WAAW,MAAf,uCACA,cAAIA,WAAW,MAAf,kMAGF,mCACA,kBAAG,eAAKA,WAAW,KAAhB,4TAGH,maAIA,gEACA,mSAGA,8IAMJd,EAAWe,gBAAiB,G,kCGzIrB,SAASC,EAAWC,GAC1B,OAAO,IAAIC,KAAKD,GAASE,qB,oICGnB,SAASC,IACf,IAkBMC,GAlBOC,QAAe,cAkBTC,OAAOC,MAE1B,OAAO,uBAAKzB,UAAW,uBACtB,sBAAIA,UAAW,SAAf,wBACA,0BACC,0BAAI,sBAAIA,UAAU,eACjBsB,EAAMI,KAAI,SAAAC,GACV,OACC,0BACC,wBAAM3B,UAAU,kBAAiBiB,OAAWU,EAAKC,YAAYC,MAA7D,OAA6E,qBAAG7B,UAAW,eAAgB8B,KAAI,IAAMH,EAAKI,KAAX,KAAqBJ,EAAKK,SAAS,GAAGC,OACrJ,sBAAIjC,UAAU,kBAIjB,0BAAI,qBAAGA,UAAW,eAAgB8B,KAAK,KAAnC,mBCnCA,SAASI,IACf,OAAQ,+BACP,sBAAIlC,UAAU,SAAd,YACA,qBAAGA,UAAU,QAAb,sIACA,sBAAIA,UAAU,SAAd,YACA,qBAAGA,UAAU,QAAb,+BACA,qBAAGA,UAAU,QAAb,yGAEC,2BAFD,uBAE2B,qBAAGA,UAAU,eAAe8B,KAAM,wCAAlC,mCCNtB,SAAS/B,EAAT,GAA0C,IAAbD,EAAY,EAAZA,SACnC,OACC,uBAAKE,UAAU,gFACd,uBAAKA,UAAU,8CACd,uBAAKA,UAAU,2BACd,uBAAKA,UAAU,gBACd,gBAACkC,EAAD,MACA,gBAACb,EAAD,QAGF,wBAAMrB,UAAU,kBACdF","file":"component---src-pages-architect-team-discussions-part-1-mdx-c7f05b2bb8acbcfa6c8c.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/learning-architect.blog/learning-architect.blog/src/components/DefaultPageLayout.tsx\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{`Подход к дискуссии в команде архитекторов`}</h1>\n    <p><em parentName=\"p\">{`Статья получилась длинная, поэтому я разбил ее на 2 части. В первой части фокус на важности\nабстрагировании от конкретики в начале рассмотрения проблемы. Как свернуть дискуссию в конструктивное\nрусло и получить максимум для принятия решения. В следующей части постараюсь описать что делать, когда\nтребования согласовали внутри и дискуссия возвращается к решению, и что делать если есть несколько\nравнозначных решений.`}</em></p>\n    <h2>{`Часть 1`}</h2>\n    <p>{`Думаю, многие из вас работали в команде и сталкивались с горячими дискуссиями при принятии того или иного\nрешения. Обычно в команде есть человек, за которым финальное слово, например тех лид. Но иногда бывают\nразногласия достаточно тяжелые, потому что команда состоит из сеньйорных людей, где у каждого найдется\nмного аргументов почему стоит прислушаться к его мнению.`}</p>\n    <p>{`Если архитектор на проекте один, то в его работе такая проблема менее выражена, потому что есть опция, в\nслучае равнозначных решений, сохранить за собой последнее слово. Не всегда, свою опцию, но важно, что\nесть возможность прекратить спор, если таков имеется.`}</p>\n    <p>{`Если же на проекте команда архитекторов, то тут начинается интересная игра. Даже если среди них есть\nлид, или СТО, то решение все еще выматывающая активность. Все понимают, что архитекторы, это специалисты,\nкоторые знают свое дело, и надо постараться прислушаться к каждому, но так как у каждого есть куча\nаргументов за свои опции и в противовес оппонент, то энергии тратится предостаточно.`}</p>\n    <p>{`Как то, я очень долго находился в такой ситуации и в один момент подзадолбался и начал думать, как\nвыйти из положения.`}</p>\n    <p>{`Давайте для начала рассмотрим ситуации.`}</p>\n    <h2>{`Пример 1. Какое облако лучше выбрать.`}</h2>\n    <p>{`Архитектор 1: «Давайте использовать AWS, лидер рынка (уже нет), у нас уже есть там десяток сервисов,\nможем продолжать использовать и дальше.»`}</p>\n    <p>{`Архитектор 2: «Давайте использовать Azure, много интересных вещей которые нам помогут, плюс у нас\nмного dotnet, а там есть dotnet ориентированные сервисы. Или давайте использовать Google Cloud, там\nнативный кубернетис и GPU инстансы, которые нам понадобятся для машинного обучения. Плюс у Google cloud удобное\nразделение по проектам, компания у нас не маленькая, это поможет организовать облако правильно и удобно.»`}</p>\n    <p>{`Архитектор 3: «Зачем нам облако, у нас же есть свои датацентры, там железо, куча сервисов уже развернуто\nи используются в продакшене.»`}</p>\n    <p>{`Дальше начинается горячая дискуссия, где каждый будет приводить 100500 аргументов в довод своим опциям.\nИ вроде все опции валидны, правда?`}</p>\n    <h2>{`Пример 2. Оставить ли DTO между слоями в рамках одного микросервиса или отрефакторить оставим только`}</h2>\n    <p>{`внешние контракты и модели<`}</p>\n    <p>{`Архитектор 1 – давайте оставлять DTO между слоями`}</p>\n    <p>{`Архитектор 2 – давайте удалять, они не несут ценности`}</p>\n    <p>{`Архитектор 3 – давайте смотреть по ситуации, нечего решать`}</p>\n    <p>{`Понятно, что примеры слишком утрированны, но я думаю каждый может представить похожие дискуссии по\nлюбому поводу, даже не в архитектурной команде.`}</p>\n    <h2>{`В чем же проблема?`}</h2>\n    <p>{`Первое, что мне начало системно бросаться в глаза во время всех этих споров — это то, что споры в\nосновном находятся вокруг конкретных решений или технологий. До разговора у каждого из членов команды уже\nпроизошел мыслительный процесс и есть выводы по теме. Только у каждого выводы могут строиться на разных\nвводных.`}</p>\n    <p>{`Только почему вводные разные?`}</p>\n    <p>{`Потому что архитектор обычно работает в частичной неопределенности, и часть требований выставляется самим\nархитектором. В такой же ситуации находится команда разработки, когда ей нужно принять самостоятельное\nрешение и требования приходится составлять самим. Примеры:`}</p>\n    <ul>\n\t<li>использовать redux или mobx?</li>\n\t<li>где пилить бизнес-логику, в моделях или в сервис слое?</li>\n    </ul>\n    <p>{`Дальше можно с пеной у рта доказывать какое решение лучше, результат всегда будет один и тот же: выиграет\nтот, кто или перекричит, или умеет лучше продавать.`}</p>\n    <h2>{`Что делать то, если сил терпеть уже нет?`}</h2>\n    <p>{`Мое предложение – это ввести конкретный формат работы для принятия решения. Этот формат должен\nподразумевать конфликт вокруг требований, а не вокруг конкретных технологий или подходов.`}</p>\n    <p>{`Конфликт вокруг требования — это то, что первично, и то, где рождается истина. При этом любое\nконкретное решение на этом этапе должно ветироваться. Его можно выразить, но предварительно конвертировав в требование.`}</p>\n    <p>{`К примеру, есть предложение использовать валидацию с помощью аннотаций, взамен fluent интерфейса.\nПопытаемся теперь выразить его в виде требования: давайте делать валидацию так, чтобы она была сильно\nсвязана с моделью. Предполагается, что именно тут и родится основная и важная дискуссия, которая должна\nзакончиться общим пониманием того, что нужно достичь.`}</p>\n    <p>{`После того как общая договорённость будет достигнута, случится магия: подойдет любое решение, если оно\nудовлетворяет требованиям( требования уже были согласованы коллективно, значит решение тоже будет\nудовлетворять коллектив).`}</p>\n    <h2>{`Возвращаясь к примерам.`}</h2>\n    <p>{`В первом примере, про выбор облака, в новой реальности разговор может быть следующим:`}</p>\n    <p>{`Архитектор 1:`}</p>\n    <p><del parentName=\"p\">{`«Давайте использовать, AWS, лидер рынка (уже нет), у нас уже есть там десяток сервисов, можем продолжать\nиспользовать и дальше.»`}</del></p>\n    <p>{`«Нам бы сделать так, чтобы после выбора облака, у нас было минимальное количество новых сущностей, и нам\nне надо было учить что-то новое, потому что у нас многие разработчики не работали с облаками, и если мы\nвнутри компании будем обмениваться опытом, это сильно нас ускорит. Также можно переиспользовать решения\nпостроенные на AWS несколькими командами.»`}</p>\n    <p>{`Тут присутствует 2 требования, которые можно прямо записать и обсудить.`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Ограничение сущностей до какого-то уровня Х. Тут хорошо бы вывести этот Х.`}</li>\n      <li parentName=\"ol\">{`Переиспользование решений для облака внутри организации.`}</li>\n    </ol>\n    <p>{`Как можно заметить, имея эти требования, под них можно подтянуть и другие облака, например переведя\nкоманды, которые используют AWS на условный Azure.`}</p>\n    <p>{`Архитектор 2:`}</p>\n    <p><del parentName=\"p\">{`«Давайте использовать Azure, много интересных вещей которые нам помогут, плюс у нас много dotnet, а там\nесть dotnet ориентированные сервисы. Или давайте использовать Google Cloud, там нативный кубернетис и GPU\nинстансы, которые нам понадобятся для машинного обучения. Плюс у Google cloud удобное разделение по\nпроектам, компания у нас не маленькая, это поможет организовать облако правильно и удобно.»`}</del></p>\n    <p>{`Нам бы иметь быстрый старт для dotnet, т.к. dotnet у нас основной стэк разработки, где есть много\nкоманд. Так же нам надо учесть наличие GPU машин, что бы разворачивать машинное обучение. Еще нам важно,\nчтобы облако предоставляло удобные инструменты организации для команд, так как организация у нас немаленькая\nи нам было бы удобно разделять и переиспользовать ресурсы между командами.`}</p>\n    <p>{`В этом примере, требования, которое стоит вынести на обсуждение, были бы такие:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`удобство для dotnet. Желательно обсудить, а чем, собственно, dotnet выделяется, если, например уже\nиспользуются докер образы.`}</li>\n      <li parentName=\"ol\">{`возможность покупать GPU инстансы.`}</li>\n      <li parentName=\"ol\">{`удобство организации работы в облаке. Конечно, при общем согласии с требованием, правильно было бы\nуточнить это требование, ответив на вопрос, а что значит «удобство» в текущем контексте.`}</li>\n    </ol>\n    <p>{`Архитектор 3:`}</p>\n    <p><del parentName=\"p\">{`Зачем нам облако, у нас же есть свои датацентры, там железо, куча сервисов уже развернуто и используются в продакшене.\nМы вложились в свои сервера, и у нас есть не используемые мощности. Выглядит как то, что облако принесет\nдополнительные расходы и мы не будем утилизировать уже потраченные деньги на железо.`}</del></p>\n    <p>{`То требование, которое предлагает этот архитектор – это приоритезация утилизации имеющихся свободных\nмощностей, что в свою очередь ведет к оптимизации расходов. Это требование спорное, и его надо обсуждать, но\nесли присмотреться, то все требования спорные в зависимости от контекста организации или проекта. Поэтому\nнадо рассматривать их в конкретном контексте, где будет рождаться своя истина.`}</p>\n    <p>{`Надеюсь, из описания и примеров идея ясна.`}</p>\n    <p>{`Дискуссию надо уводить от уровня специфики технологий на уровень требований. Все требования из головы\nучастников надо выводить из неявных в явные. Для кого-то требование может быть очевидным, для других оно\nможет быть спорным, для третьих может быть не верным вообще.`}</p>\n    <p>{`Второй пример оставлю на свою интерпретацию как хорошо бы было поменять диалог, чтобы быстрее прийти к\nобщему пониманию`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","/**\r\n * Layout component that queries for data\r\n * with Gatsby's useStaticQuery component\r\n *\r\n * See: https://www.gatsbyjs.com/docs/use-static-query/\r\n */\r\n\r\nimport * as React from \"react\"\r\nimport { WithSidebarLayout } from './WithSidebarLayout';\r\n\r\nconst Layout = ({ children }) => {\r\n\treturn (\r\n\t\t<WithSidebarLayout>\r\n\t\t\t<article className=\"article\">\r\n\t\t\t\t{children}\r\n\t\t\t</article>\r\n\t\t</WithSidebarLayout>\r\n\t)\r\n}\r\n\r\nexport default Layout\r\n","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","export function formatDate(strDate: string) {\n\treturn new Date(strDate).toLocaleDateString();\n}\n","import * as React from 'react';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport { formatDate } from '../common/formatDate';\n\nexport function RecentPublications() {\n\tconst data = useStaticQuery(graphql`\n\t query recentsQuery {\n\t\t allMdx(\n\t\t\tsort: { fields: [frontmatter___date], order: DESC }\n\t\t ) {\n\t\t  nodes {\n\t\t\t headings(depth: h1) {\n\t\t\t\tvalue\n\t\t\t }\n\t\t\t slug\n\t\t\t frontmatter {\n\t\t\t\tdate\n\t\t\t\tauthor\n\t\t\t }\n\t\t  }\n\t\t }\n\t  }\n  `)\n\tconst posts = data.allMdx.nodes;\n\n\treturn <nav className={'recent-publications'}>\n\t\t<h3 className={'sub-h'}>Последние публикации</h3>\n\t\t<ul>\n\t\t\t<li><hr className=\"mb-3 mt-3\"/></li>\n\t\t\t{posts.map(post => {\n\t\t\t\treturn (\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<span className=\"text-gray-500\">{formatDate(post.frontmatter.date)} - </span><a className={'link-default'} href={`/${post.slug}/`}>{post.headings[0].value}</a>\n\t\t\t\t\t\t<hr className=\"mb-3 mt-3\"/>\n\t\t\t\t\t</li>\n\t\t\t\t)\n\t\t\t})}\n\t\t\t<li><a className={'link-default'} href=\"/\">К списку тем</a></li>\n\t\t</ul>\n\t</nav>;\n}\n","import * as React from 'react';\n\nexport function About() {\n\treturn (<section>\n\t\t<h3 className=\"sub-h\">Про блог</h3>\n\t\t<p className=\"py-5\">Записываю мысли о работе и не только. Попытка систематизировать информацию и записать, то что приходиться так или иначе повторять.</p>\n\t\t<h3 className=\"sub-h\">Про меня</h3>\n\t\t<p className=\"pt-5\">Привет, меня зовут Евгений.</p>\n\t\t<p className=\"py-5\">\n\t\t\tНачиная с 2019 формально работаю архитектором. До сих пор разбираюсь что это значит и как с этим жить.\n\t\t\t<br />Написать можно сюда <a className=\"link-default\" href={\"mailto:admin@learning-architect.blog\"}>admin@learning-architect.blog</a>\n\t\t</p>\n\t</section>);\n}\n","import * as React from 'react';\nimport { RecentPublications } from './RecentPublications';\nimport { About } from './About';\n\nexport function WithSidebarLayout({ children }) {\n\treturn (\n\t\t<div className='container bg-white max-w-3xl mx-auto px-4 sm:px-6 xl:max-w-5xl xl:px-0 py-16'>\n\t\t\t<div className='grid grid-cols-1 md:grid-cols-12 shadow-lg'>\n\t\t\t\t<div className=\"col-span-3 p-6 border-r\">\n\t\t\t\t\t<div className=\"sticky top-0\">\n\t\t\t\t\t\t<About/>\n\t\t\t\t\t\t<RecentPublications/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<main className=\"col-span-8 p-6\">\n\t\t\t\t\t{children}\n\t\t\t\t</main>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n"],"sourceRoot":""}