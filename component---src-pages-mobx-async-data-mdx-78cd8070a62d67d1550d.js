"use strict";(self.webpackChunklearning_architect_blog=self.webpackChunklearning_architect_blog||[]).push([[119],{8453:function(n,a,s){s.d(a,{RP:function(){return e}});var t=s(6540);const p=t.createContext({});function e(n){const a=t.useContext(p);return t.useMemo(()=>"function"==typeof n?n(a):{...a,...n},[a,n])}},9047:function(n,a,s){s.r(a);var t=s(8453),p=s(6540);function e(n){const a=Object.assign({h1:"h1",p:"p",h2:"h2",span:"span",ol:"ol",li:"li",strong:"strong",em:"em"},(0,t.RP)(),n.components);return p.createElement(p.Fragment,null,p.createElement(a.h1,null,"Designing a Type-Safe Asynchronous Data Loading Pattern with React and MobX"),"\n","\n",p.createElement(a.p,null,"Asynchronous data loading is a pervasive challenge in modern web development.\nWhen using React and MobX, the complexity can quickly escalate, giving rise to questions about type safety, error handling, and boilerplate code.\nIn this article, we won't just talk about these challenges; we'll solve them."),"\n",p.createElement(a.p,null,"Through a targeted design session, we will dissect the problem and build a type-safe and efficient solution for asynchronous data loading in React and MobX applications."),"\n",p.createElement(a.p,null,"Additionally, this article aims to offer more than just a solution; it aims to walk you through the thinking process involved in tackling a problem that lies at the intersection of technology and application design."),"\n","\n",p.createElement(a.h2,null,"Problem statement"),"\n",p.createElement(a.p,null,"First and foremost, this article assumes you have a working knowledge of React, MobX, and TypeScript. If you're not well-versed in these technologies, don't fret; this article can still provide valuable insights into the application-level technical design process."),"\n",p.createElement(a.p,null,"Every effective design begins with a clear problem statement."),"\n",p.createElement(a.p,null,"In our case, the challenge lies in constructing a UI that interacts seamlessly with asynchronous processes. These are often encapsulated within promises, which frequently serve as wrappers for network operations like HTTP calls."),"\n",p.createElement(a.p,null,"Now, let's delve into the conventional workflow for handling asynchronous data loading in React and MobX applications."),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> makeAutoObservable<span class="token punctuation">,</span> runInAction <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'mobx\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> observer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'mobx-react-lite\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// let say some response from API</span>\n<span class="token keyword">type</span> <span class="token class-name">SomeData</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">class</span> <span class="token class-name">MyStore</span> <span class="token punctuation">{</span>\n    isLoading<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    data<span class="token operator">:</span> SomeData <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>\n\terror<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>\n\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">makeAutoObservable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">async</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// typical pattern in loading data</span>\n\t\t<span class="token comment">// start loading process</span>\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>isLoading <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">\'https://some-api.com\'</span><span class="token punctuation">)</span>\n\t\t\t<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\t\t<span class="token function">runInAction</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token comment">// if success - initialize data with response</span>\n\t\t\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>\n\t\t\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token comment">// in case of error - show error</span>\n\t\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>error <span class="token operator">=</span> <span class="token string">\'Unexpected error happened during loading data.\'</span><span class="token punctuation">;</span>\n            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token function">runInAction</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token comment">// in all cases finish loading process</span>\n\t\t\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>isLoading <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\t\t\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> myStore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> MyComponent <span class="token operator">=</span> <span class="token function">observer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token comment">// orphan promise, most likely complaint of eslint</span>\n        myStore<span class="token punctuation">.</span><span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// now handle all the loading cases in component</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n\t\t\t</span><span class="token punctuation">{</span>myStore<span class="token punctuation">.</span>isLoading <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">Loading...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">}</span><span class="token plain-text">\n\t\t\t</span><span class="token punctuation">{</span>myStore<span class="token punctuation">.</span>error <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>myStore<span class="token punctuation">.</span>error<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">}</span><span class="token plain-text">\n\t\t\t</span><span class="token punctuation">{</span>myStore<span class="token punctuation">.</span>data <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>myStore<span class="token punctuation">.</span>data<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">}</span><span class="token plain-text">\n\t\t</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n\t<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"So, what are the key issues with the current approach?"),"\n",p.createElement(a.ol,null,"\n",p.createElement(a.li,null,"\n",p.createElement(a.p,null,p.createElement(a.strong,null,"Orphan Promise"),": ESLint often flags the promise in useEffect as unhandled. Although we can disable the ESLint warning, the code doesn't make it explicit how errors within the promise are managed, introducing unnecessary cognitive load each time the component is reviewed."),"\n"),"\n",p.createElement(a.li,null,"\n",p.createElement(a.p,null,p.createElement(a.strong,null,"Boilerplate Overhead in Components and Stores"),": Handling loading states directly within each component and managing the async process in each MobX store can become cumbersome as the application scales. This leads to repetitive and fragmented code across both UI and state management layers."),"\n"),"\n",p.createElement(a.li,null,"\n",p.createElement(a.p,null,p.createElement(a.strong,null,"Lax Error Handling"),": The manual handling of loading states doesn't enforce best practices in error handling. It's easy to overlook cases, leaving the user staring at a blank screen or a perpetual loading indicator."),"\n"),"\n",p.createElement(a.li,null,"\n",p.createElement(a.p,null,p.createElement(a.strong,null,"Ambiguous Error Management"),": The existing code creates ambiguity about how to deal with errors—should they be logged to the console, displayed to the user, or handled in some other way? This again adds cognitive load to the development process."),"\n"),"\n",p.createElement(a.li,null,"\n",p.createElement(a.p,null,p.createElement(a.strong,null,"MobX Async Complexity"),": The current pattern also exposes the inherent intricacies of dealing with asynchronous functions in MobX. For instance, one might forget to invoke ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">runInAction</code>'}}),", causing unintended behavior."),"\n"),"\n"),"\n",p.createElement(a.h2,null,"Design goals"),"\n",p.createElement(a.p,null,"Now that we've pinpointed the issues with the existing setup, it's time to outline our design objectives. While these goals largely stem from our problem statement, articulating them explicitly adds clarity to our mission."),"\n",p.createElement(a.ol,null,"\n",p.createElement(a.li,null,"\n",p.createElement(a.p,null,p.createElement(a.strong,null,"Type Safety"),": Our design should be type-safe to catch errors at compile time rather than at runtime, ensuring robustness. It means that we should make state that is not possible in our subject area impossible to represent in our types."),"\n"),"\n",p.createElement(a.li,null,"\n",p.createElement(a.p,null,p.createElement(a.strong,null,"Error Handling"),": The approach must standardize error handling to provide a consistent user experience and ease developer cognitive load."),"\n"),"\n",p.createElement(a.li,null,"\n",p.createElement(a.p,null,p.createElement(a.strong,null,"Boilerplate Minimization"),": The solution should aim to reduce boilerplate in both React components and MobX stores, streamlining code maintenance and scalability."),"\n"),"\n",p.createElement(a.li,null,"\n",p.createElement(a.p,null,p.createElement(a.strong,null,"MobX Async Abstraction"),": We aim to simplify the complexities tied to handling asynchronous functions in MobX, enhancing code readability and maintainability."),"\n"),"\n",p.createElement(a.li,null,"\n",p.createElement(a.p,null,p.createElement(a.strong,null,"Framework Agnostic"),": Although our examples will primarily utilize React, the design should be sufficiently abstract to be applicable to other frameworks. This focus on MobX and TypeScript enables broader usability."),"\n"),"\n",p.createElement(a.li,null,"\n",p.createElement(a.p,null,p.createElement(a.strong,null,"Additional Goals"),": The solution should help to build other patterns of async actions, like easy automatic or manual retries, cancellation and immutability where it is needed."),"\n"),"\n"),"\n",p.createElement(a.p,null,p.createElement(a.em,null,"NOTE: While some may argue that changing UI frameworks is a non-issue, real-world scenarios prove otherwise. At the time of writing this article, I'm work with a company where our website features pages built in almost every major framework—React, Vue 2/3, AngularJS, and Angular.")),"\n",p.createElement(a.h2,null,"Investigation on ready-to-use solutions"),"\n",p.createElement(a.p,null,"Before we go into the design process, let's take a look at some existing solutions to see if they can meet our needs."),"\n",p.createElement(a.ol,null,"\n",p.createElement(a.li,null,"\n",p.createElement(a.p,null,p.createElement("a",{href:"https://react.dev/reference/react/Suspense",target:"_blank",rel:"noopener"},"React Suspense")," - native way to do loading in React. It does not feet design goals in 2 dimensions. First of all it is not framework-agnostic, it could be applied only with React. Second, it does not enforce good practices of loading and error handling."),"\n"),"\n",p.createElement(a.li,null,"\n",p.createElement(a.p,null,p.createElement("a",{href:"https://tanstack.com/query/v3/docs/react/overview",target:"_blank",rel:"noopener"},"React Query")," - a hook way to do loading process. Definitely do not fit goals, since it is tight to React and does not enforce good practices of loading and error handling."),"\n"),"\n",p.createElement(a.li,null,"\n",p.createElement(a.p,null,p.createElement("a",{href:"https://github.com/mobxjs/mobx-utils#frompromise",target:"_blank",rel:"noopener"},"mobx-utils.fromPromise")," - well this a good one, really a good one. If you need ready-to-go option, I highly recommend to just use ",p.createElement(a.em,null,"mobx-utils.fromPromise")," . But in the sake of demonstrating design process, we will not use it and design own similar thing. Also will add some minor improvements to fromPromise has, like immutability of properties and out-of-the-box retries."),"\n"),"\n"),"\n",p.createElement(a.h2,null,"Design process"),"\n",p.createElement(a.p,null,"Now that we've established our goals and investigated existing solutions, it's time to design our own solution. We'll start by outlining the high-level design and then dive into the details."),"\n",p.createElement(a.p,null,"We might start from jumping directly into mobx based primitive that looks like"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> makeAutoObservable<span class="token punctuation">,</span> action <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'mobx\'</span><span class="token punctuation">;</span>\n<span class="token keyword">class</span> <span class="token class-name">MobxAsyncData<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token punctuation">{</span>\n\tdata<span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>\n    error<span class="token operator">:</span> <span class="token builtin">unknown</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>\n    isLoading<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\n    <span class="token function">constructor</span><span class="token punctuation">(</span>input<span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">makeAutoObservable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        input<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>\n            <span class="token function">action</span><span class="token punctuation">(</span><span class="token string">\'resolve\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>\n\t\t\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>isLoading <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\t\t\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t\t\t<span class="token function">action</span><span class="token punctuation">(</span><span class="token string">\'reject\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span>error <span class="token operator">=</span> error<span class="token punctuation">;</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span>isLoading <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\t\t\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"While this might look like a good approach, it fails to meet design goals that were defined at the begging.\nTry not to look at the code in the constructor, but rather concentrate on the type definition.\nIf we look close this state is possible from the type definition perspective:"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> asyncData <span class="token operator">=</span> <span class="token punctuation">{</span>\n    loading<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n\tdata<span class="token operator">:</span> <span class="token string">\'some data\'</span><span class="token punctuation">,</span>\n\terror<span class="token operator">:</span> <span class="token string">\'some error\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"This is not possible case if we are talking about async data loading, since we can not have data and error at the same time."),"\n",p.createElement(a.p,null,"So first of all lest start from basics and describe state of the loading in typescript terms. Which is close to model our domain."),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token comment">// This is our success case when we have specific result of async action</span>\n<span class="token comment">// we explicitly say</span>\n<span class="token keyword">type</span> <span class="token class-name">Success<span class="token operator">&lt;</span>TData<span class="token operator">></span></span> <span class="token operator">=</span> Readonly<span class="token operator">&lt;</span><span class="token punctuation">{</span>\n    kind<span class="token operator">:</span> <span class="token string">\'success\'</span><span class="token punctuation">;</span>\n    data<span class="token operator">:</span> TData<span class="token punctuation">;</span>\n    loading<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">;</span>\n\n<span class="token comment">// This is our error case when we have error of async action</span>\n<span class="token keyword">type</span> <span class="token class-name">Errored</span> <span class="token operator">=</span> Readonly<span class="token operator">&lt;</span><span class="token punctuation">{</span>\n    kind<span class="token operator">:</span> <span class="token string">\'error\'</span><span class="token punctuation">;</span>\n    loading<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    error<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">;</span>\n    errorMessage<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">;</span>\n\n<span class="token comment">// This is our loading case when we have no result of async action yet</span>\n<span class="token keyword">type</span> <span class="token class-name">LoadingInitiated</span> <span class="token operator">=</span> Readonly<span class="token operator">&lt;</span><span class="token punctuation">{</span>\n    kind<span class="token operator">:</span> <span class="token string">\'loading\'</span><span class="token punctuation">;</span>\n    loading<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token class-name">Unitiated</span> <span class="token operator">=</span> Readonly<span class="token operator">&lt;</span><span class="token punctuation">{</span>\n\tkind<span class="token operator">:</span> <span class="token string">\'uninitiated\'</span><span class="token punctuation">;</span>\n\tloading<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">;</span>\n\n<span class="token comment">// And finally we join them together</span>\n<span class="token comment">// into discriminated union to represent all the possible states</span>\n<span class="token keyword">type</span> <span class="token class-name">AsyncState<span class="token operator">&lt;</span>TData<span class="token operator">></span></span> <span class="token operator">=</span> Success<span class="token operator">&lt;</span>TData<span class="token operator">></span> <span class="token operator">|</span> Errored <span class="token operator">|</span> LoadingInitiated <span class="token operator">|</span> Unitiated<span class="token punctuation">;</span>\n\n<span class="token comment">// Discriminator (kind property) in union</span>\n<span class="token comment">// gives ability to utilize typescript inference</span>\n<span class="token comment">// in conditional statements to dispatch correct type</span>\n<span class="token comment">// and users of the state mostly will be obligated to do that, i.e.</span>\n<span class="token keyword">const</span> state<span class="token operator">:</span> AsyncState<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span> kind<span class="token operator">:</span> <span class="token string">\'success\'</span><span class="token punctuation">,</span> data<span class="token operator">:</span> <span class="token string">\'some data\'</span><span class="token punctuation">,</span> loading<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span>kind <span class="token operator">===</span> <span class="token string">\'success\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    state<span class="token punctuation">.</span>data\t<span class="token comment">// become available for usage and type is correctly inferred as string</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"As you might see we define specific type for each possible state of async action and utilize discriminated union to represent all the possible states."),"\n",p.createElement(a.p,null,"Now we can create helpers to create data record of each type."),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> receivedData <span class="token operator">=</span> <span class="token operator">&lt;</span>TData<span class="token operator">></span><span class="token punctuation">(</span>data<span class="token operator">:</span> TData<span class="token punctuation">)</span><span class="token operator">:</span> Success<span class="token operator">&lt;</span>TData<span class="token operator">></span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n\tkind<span class="token operator">:</span> <span class="token string">\'success\'</span><span class="token punctuation">,</span>\n\tdata<span class="token punctuation">,</span>\n\tloading<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> receivedError <span class="token operator">=</span> <span class="token punctuation">(</span>error<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span><span class="token operator">:</span> Errored <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n\tkind<span class="token operator">:</span> <span class="token string">\'error\'</span><span class="token punctuation">,</span>\n\terror<span class="token punctuation">,</span>\n\terrorMessage<span class="token operator">:</span> error <span class="token keyword">instanceof</span> <span class="token class-name">Error</span> <span class="token operator">?</span> error<span class="token punctuation">.</span>message <span class="token operator">:</span> <span class="token keyword">typeof</span> error <span class="token operator">===</span> <span class="token string">\'string\'</span> <span class="token operator">?</span> error <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>\n\tloading<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> newLoading <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> LoadingInitiated <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n\tkind<span class="token operator">:</span> <span class="token string">\'loading\'</span><span class="token punctuation">,</span>\n\tloading<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> uninitiated <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Unitiated <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n\tkind<span class="token operator">:</span> <span class="token string">\'uninitiated\'</span><span class="token punctuation">,</span>\n\tloading<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"Now when our domain is modelled in pure typescript types, we can apply it to next layer of abstraction - mobx entities."),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> makeObservable<span class="token punctuation">,</span> runInAction<span class="token punctuation">,</span> observable<span class="token punctuation">,</span> action <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'mobx\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AsyncData<span class="token operator">&lt;</span>TData<span class="token operator">></span></span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> empty <span class="token operator">=</span> <span class="token operator">&lt;</span>TData<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">AsyncData<span class="token operator">&lt;</span>TData<span class="token operator">></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">\'Cannot initiate empty AsyncData\'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token decorator"><span class="token at operator">@</span><span class="token function">observable</span></span><span class="token punctuation">.</span>ref\n    <span class="token keyword">public</span> state<span class="token operator">:</span> AsyncState<span class="token operator">&lt;</span>TData<span class="token operator">></span> <span class="token operator">=</span> <span class="token function">unitiated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// we are passing callback here in order to be able to utilize callback later</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token function-variable function">loadCallback</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>TData<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">makeObservable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// here we encapsulate orphaned promise,</span>\n\t<span class="token comment">// and it is safe since we know that all the errors are handled below</span>\n    <span class="token function-variable function">start</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// here we encapsulate standard async operation representation in any generic UI</span>\n\t<span class="token comment">// with handling all the possible cases</span>\n    <span class="token decorator"><span class="token at operator">@</span><span class="token function">action</span></span><span class="token punctuation">.</span>bound\n    <span class="token keyword">async</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>kind <span class="token operator">===</span> <span class="token string">\'success\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">\'Cannot initiate already loaded AsyncData\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token function">newLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token function">runInAction</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token function">receivedData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">runInAction</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token function">receivedError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// convenience method to bind loading states quickly</span>\n    <span class="token keyword">get</span> <span class="token function">loading</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>loading<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"Perfect, it is something already. Now we can use it in our stores."),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> AsyncData <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./AsyncData\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> observable<span class="token punctuation">,</span> makeObservable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'mobx\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> observer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'mobx-react-lite\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">MyStore</span> <span class="token punctuation">{</span>\n    <span class="token decorator"><span class="token at operator">@</span><span class="token function">observable</span></span><span class="token punctuation">.</span>ref\n\tmyItems <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AsyncData</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">\'https://some-api.com\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=></span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">makeObservable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> myStore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> MyComponent <span class="token operator">=</span> <span class="token function">observer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t<span class="token function">useEffect</span><span class="token punctuation">(</span>myStore<span class="token punctuation">.</span>myItems<span class="token punctuation">.</span>start<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">const</span> <span class="token punctuation">{</span> myItems <span class="token punctuation">}</span> <span class="token operator">=</span> myStore<span class="token punctuation">;</span>\n\n\t<span class="token comment">// now handle all the loading cases in component</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n\t\t\t</span><span class="token punctuation">{</span>myItems<span class="token punctuation">.</span>loading <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">Loading...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">}</span><span class="token plain-text">\n\t\t\t</span><span class="token punctuation">{</span>myItems<span class="token punctuation">.</span>state<span class="token punctuation">.</span>kind <span class="token operator">===</span> <span class="token string">\'error\'</span> <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>myItems<span class="token punctuation">.</span>state<span class="token punctuation">.</span>errorMessage <span class="token operator">??</span> <span class="token string">\'Unexpected error\'</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">}</span><span class="token plain-text">\n\t\t\t</span><span class="token punctuation">{</span>myItems<span class="token punctuation">.</span>state<span class="token punctuation">.</span>kind <span class="token operator">===</span> <span class="token string">\'success\'</span> <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>myItems<span class="token punctuation">.</span>state<span class="token punctuation">.</span>data<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">}</span><span class="token plain-text">\n\t\t</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n\t<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"Well we have some primitives to work with and component look like it handles the different cases."),"\n",p.createElement(a.p,null,"Let's look at the design goals we set:"),"\n",p.createElement(a.ol,null,"\n",p.createElement(a.li,null,"\n",p.createElement(a.p,null,p.createElement(a.strong,null,"Type Safety"),": done. It now forces to check state before reaching to a data. Also, specific state is enforced."),"\n"),"\n",p.createElement(a.li,null,"\n",p.createElement(a.p,null,p.createElement(a.strong,null,"Error Handling"),": not done yet, component itself looks like it was before."),"\n"),"\n",p.createElement(a.li,null,"\n",p.createElement(a.p,null,p.createElement(a.strong,null,"Boilerplate Minimization"),": almost done, we do not have boilerplate in store anymore, but still a little in the component."),"\n"),"\n",p.createElement(a.li,null,"\n",p.createElement(a.p,null,p.createElement(a.strong,null,"MobX Async Abstraction"),": done. Async machinery works outside our code and user code works only with observables."),"\n"),"\n",p.createElement(a.li,null,"\n",p.createElement(a.p,null,p.createElement(a.strong,null,"Framework Agnostic"),": also done since we used plain typescript and mobx."),"\n"),"\n"),"\n",p.createElement(a.p,null,"While it is possible to create pattern on top of what we have now for handling all the states in component, I'll omit this part. You can use it as opportunity to model it further.\nBut demonstrate now what we can do with a good foundation we have now."),"\n",p.createElement(a.p,null,"Let's solve some of the additional goals, let say we want to have retries in our async action.\nI'll demonstrate only changed parts."),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">AsyncDataOptions</span> <span class="token punctuation">{</span>\n\t<span class="token comment">// indicates that action could be users might try to retry operation if it is failed</span>\n    manuallyRetriable<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AsyncData<span class="token operator">&lt;</span>TData<span class="token operator">></span></span> <span class="token punctuation">{</span>\n    <span class="token comment">// ... other code</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span>\n        <span class="token keyword">private</span> <span class="token function-variable function">loadCallback</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>TData<span class="token operator">></span><span class="token punctuation">,</span>\n        <span class="token keyword">private</span> options<span class="token operator">?</span><span class="token operator">:</span> AsyncDataOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// we have added options</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">get</span> <span class="token function">manuallyRetriable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token operator">?.</span>manuallyRetriable <span class="token operator">??</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token decorator"><span class="token at operator">@</span><span class="token function">action</span></span><span class="token punctuation">.</span>bound\n    <span class="token keyword">async</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>manuallyRetriable <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>kind <span class="token operator">===</span> <span class="token string">\'success\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">\'Cannot initiate already loaded AsyncData. If it should be possible - please indicate that it can be retried manually\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">// ... other function code</span>\n\t<span class="token punctuation">}</span>\n\n    <span class="token comment">// ... class other code</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"Now, with our design in place, we can invoke the initiate method as many times as needed, provided we've marked our data as retriable. Additional functionalities like automatic retries and operation cancellation can also be seamlessly integrated using the same approach."),"\n",p.createElement(a.p,null,"But that's not all. The boilerplate code within components still bothers me, and error handling isn't yet fully enforced. Let's tackle this issue from a different angle by introducing a component pattern for our application. Our goal is to create a generic component that leverages AsyncData to manage flow control."),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> AsyncData <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./AsyncData\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Spinner<span class="token punctuation">,</span> Alert <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./YourProjectDefaultComponents\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> observer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'mobx-react-lite\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// here we have a little bit of typescript magic</span>\n<span class="token comment">// this type maps type of the Data by having array of  AsyncData&lt;TData> as input</span>\n<span class="token keyword">type</span> <span class="token class-name">InferSuccessData<span class="token operator">&lt;</span>TData <span class="token keyword">extends</span> <span class="token keyword">readonly</span> AsyncData<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">readonly</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span> <span class="token operator">=</span>\n    <span class="token punctuation">{</span> <span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> TData<span class="token punctuation">]</span><span class="token operator">:</span> TData<span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">AsyncData<span class="token operator">&lt;</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token operator">></span></span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token builtin">never</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token class-name">AsyncDataProp<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">readonly</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> TDataCollection <span class="token keyword">extends</span> <span class="token keyword">readonly</span> AsyncData<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    asyncData<span class="token operator">:</span> TDataCollection\n    <span class="token function-variable function">children</span><span class="token operator">:</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> InferSuccessData<span class="token operator">&lt;</span>TDataCollection<span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">=></span> React<span class="token punctuation">.</span>ReactElement\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// component works with array (actually tuple) of AsyncData</span>\n<span class="token comment">// makes standard logic of checking all the states and render default components</span>\n<span class="token comment">// on success case it delegates rendering to children function</span>\n<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">AsyncDataPatternRaw</span><span class="token generic class-name"><span class="token operator">&lt;</span>\n\tTValues <span class="token keyword">extends</span> <span class="token keyword">readonly</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n\tTDataCollection <span class="token keyword">extends</span> <span class="token keyword">readonly</span> AsyncData<span class="token operator">&lt;</span>TValues<span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span></span>\n<span class="token punctuation">(</span>\n    <span class="token punctuation">{</span> asyncData<span class="token punctuation">,</span> children <span class="token punctuation">}</span><span class="token operator">:</span> AsyncDataProp<span class="token operator">&lt;</span>TValues<span class="token punctuation">,</span> TDataCollection<span class="token operator">></span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>asyncData<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>d <span class="token operator">=></span> d<span class="token punctuation">.</span>state<span class="token punctuation">.</span>kind <span class="token operator">===</span> <span class="token string">\'loading\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Spinner</span></span><span class="token punctuation">></span></span><span class="token plain-text">Please wait while all the data is loading</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Spinner</span></span><span class="token punctuation">></span></span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>asyncData<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>d <span class="token operator">=></span> d<span class="token punctuation">.</span>state<span class="token punctuation">.</span>kind <span class="token operator">===</span> <span class="token string">\'error\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n\t\t\t</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Alert</span></span>\n\t            <span class="token attr-name">message</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Error loading data<span class="token punctuation">"</span></span>\n\t            <span class="token attr-name">description</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Something went wrong while loading the data. Please try to refresh the page.<span class="token punctuation">"</span></span>\n\t            <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>error<span class="token punctuation">"</span></span>\n\t        <span class="token punctuation">/></span></span><span class="token plain-text">\n\t\t\t</span><span class="token punctuation">{</span>asyncData<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>d <span class="token operator">=></span> d<span class="token punctuation">.</span>manuallyRetriable<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>\n                    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> asyncData<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>d <span class="token operator">=></span> d<span class="token punctuation">.</span>state<span class="token punctuation">.</span>kind <span class="token operator">===</span> <span class="token string">\'error\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>d <span class="token operator">=></span> d<span class="token punctuation">.</span><span class="token function">initiate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>\n\t\t\t\t<span class="token punctuation">></span></span><span class="token plain-text">\n\t\t\t\t\tRetry\n                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n            <span class="token punctuation">}</span><span class="token plain-text">\n\t\t</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> <span class="token function">children</span><span class="token punctuation">(</span>asyncData<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>d <span class="token operator">=></span> d<span class="token punctuation">.</span>state<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">unknown</span> <span class="token keyword">as</span> InferSuccessData<span class="token operator">&lt;</span>TDataCollection<span class="token punctuation">,</span> TValues<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> AsyncDataPattern <span class="token operator">=</span> <span class="token function">observer</span><span class="token punctuation">(</span>AsyncDataPatternRaw<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"And component can be used as next."),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> AsyncDataPattern <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./AsyncDataPattern\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">MyComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">AsyncDataPattern</span></span>\n            <span class="token attr-name">asyncData</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span>myStore1<span class="token punctuation">.</span>someLoading<span class="token punctuation">,</span> myStore2<span class="token punctuation">.</span>someUpdate<span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n\t\t</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">[</span>data1<span class="token punctuation">,</span> data2<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n\t\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n\t\t\t\t</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>data1<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n\t\t\t\t</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>data2<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n\t\t\t</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n\t\t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">\n\t</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">AsyncDataPattern</span></span><span class="token punctuation">></span></span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"As you can see we left as minimum boilerplate in component as possible, and also we have enforced error handling and included default option to retry user actions if some of them failed."),"\n",p.createElement(a.h2,null,"Conclusion"),"\n",p.createElement(a.p,null,"The pattern of thinking presented in this article should helps to build better and scalable applications."),"\n",p.createElement(a.p,null,"Main takes are next:"),"\n",p.createElement(a.ol,null,"\n",p.createElement(a.li,null,"Think of what primitives could be extracted and re-used across application."),"\n",p.createElement(a.li,null,"As soon as you have such primitives, design them following approach described in the article","\n",p.createElement(a.ol,null,"\n",p.createElement(a.li,null,"Start from defining a problem statement"),"\n",p.createElement(a.li,null,"Start from clear goals for design to solve defined problems"),"\n",p.createElement(a.li,null,"Analyze existing approaches and tools to solve the problem. If there is no such - design your own."),"\n",p.createElement(a.li,null,"Start from domain modelling as pure as possible, ideally only language abilities. Try to model domain in a way that it is impossible to represent invalid state."),"\n",p.createElement(a.li,null,"Then move by the layer of abstractions higher (Mobx -> react), until last one is not reached."),"\n"),"\n"),"\n"),"\n",p.createElement(a.p,null,"Good design should allow to add new features and change existing ones with minimal effort."),"\n",p.createElement(a.p,null,"It should be easy to understand and maintain."),"\n",p.createElement(a.p,null,"It should be easy to test and debug. It should be easy to scale and extend."))}a.default=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,t.RP)(),n.components);return a?p.createElement(a,n,p.createElement(e,n)):e(n)}}}]);
//# sourceMappingURL=component---src-pages-mobx-async-data-mdx-78cd8070a62d67d1550d.js.map