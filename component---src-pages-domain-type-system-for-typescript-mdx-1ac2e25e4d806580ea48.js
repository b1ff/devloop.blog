"use strict";(self.webpackChunklearning_architect_blog=self.webpackChunklearning_architect_blog||[]).push([[656],{3660:function(n,s,a){a.r(s);var e=a(8453),t=a(6540);function o(n){const s=Object.assign({h1:"h1",p:"p",a:"a",span:"span",h3:"h3",ul:"ul",li:"li",strong:"strong"},(0,e.RP)(),n.components);return t.createElement(t.Fragment,null,t.createElement(s.h1,null,"Domain Type System for TypeScript"),"\n","\n",t.createElement(s.p,null,"As everything that happens nowadays in tech, this article starts from AI :)"),"\n",t.createElement(s.p,null,"As I've been experimenting extensively with AI-augmented development, I've been searching for ways to structure code that can act as a \"cage\" for AI - constraining it to reduce bugs and minimize the time I spend manually correcting its output."),"\n",t.createElement(s.p,null,'LLMs can output tremendous amounts of code per iteration, but as soon as we need quality and workability acceptable for development goals, the only "tool" we can rely on is human review. Which has low speed. The more AI output noise in the result, the more detours the human brain should take, the more is missed in the code.'),"\n",t.createElement(s.p,null,"I built custom linters and additional codebase checks, which partially improved the situation, but still, they could not cover issues in logic, especially in projects that are logic-heavy."),"\n",t.createElement(s.p,null,"Here's what I mean by logical errors: In one code review, I missed that AI had confused entity IDs deep within the business logic, leading to very annoying and hard-to-debug issues. In another case, AI treated admin users and public users as interchangeable, attempting to fetch public user profiles for admin users :facepalm:"),"\n",t.createElement(s.p,null,"These are exactly the kinds of problems that linters can't catch - they're logical, not syntactic. This got me thinking about applying Domain-Driven Design (DDD) principles to make the code more \"sound\" and restrictive, ideally improving the LLM's ability to self-correct."),"\n",t.createElement(s.p,null,"The example with regular user and admin user is relatively easy to fix, especially in TypeScript by introducing ",t.createElement(s.a,{href:"https://www.learningtypescript.com/articles/branded-types"},"brand types")," for user ids."),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">UserId</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span> <span class="token keyword">readonly</span> brand<span class="token operator">:</span> unique <span class="token builtin">symbol</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">AdminId</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span> <span class="token keyword">readonly</span> brand<span class="token operator">:</span> unique <span class="token builtin">symbol</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">getUserProfile</span><span class="token punctuation">(</span>userId<span class="token operator">:</span> UserId<span class="token punctuation">)</span><span class="token operator">:</span> UserProfile <span class="token punctuation">{</span>\n  <span class="token comment">// fetch user profile by user id</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">getAdminProfile</span><span class="token punctuation">(</span>adminId<span class="token operator">:</span> AdminId<span class="token punctuation">)</span><span class="token operator">:</span> AdminProfile <span class="token punctuation">{</span>\n  <span class="token comment">// fetch admin profile by admin id</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(s.p,null,"As you can see, now it's impossible to accidentally mix admin and user IDs - the type system prevents it at compile time."),"\n",t.createElement(s.p,null,"This brand types approach works well for simple cases, but there are bigger, more complex logical structures that remain problematic. In typical architectures, once an LLM has access to repositories and databases, it can construct operations that fetch anything from anywhere, bypassing business rules entirely."),"\n",t.createElement(s.p,null,"Traditional DDD with aggregates and synchronous business rules offers a solution, but it's not well-suited for distributed systems where you need high performance, clear transactional boundaries, and operational reliability. This led me to explore whether I could combine DDD modeling principles while maintaining these quality attributes."),"\n","\n",t.createElement(s.h3,null,"Problem Example"),"\n",t.createElement(s.p,null,"To illustrate the different approaches and their trade-offs, let me walk you through a concrete example that we'll use throughout this article."),"\n",t.createElement(s.p,null,"Consider a conference registration system with the following requirements:"),"\n",t.createElement(s.ul,null,"\n",t.createElement(s.li,null,"Conferences have a limited number of seats"),"\n",t.createElement(s.li,null,"We need to register attendees while avoiding overbooking"),"\n",t.createElement(s.li,null,"When someone registers, we reserve their spot but only confirm it after payment"),"\n",t.createElement(s.li,null,"If payment fails or times out, we release the reserved space"),"\n"),"\n",t.createElement(s.p,null,"This scenario captures the complexity of real-world business logic: state management, concurrency concerns, and business rules that need to be enforced consistently."),"\n",t.createElement(s.h3,null,"Traditional DDD"),"\n",t.createElement(s.p,null,"Let's see a draft of how a simplified conference booking system could look like using the traditional DDD approach."),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token comment">// Brand types to avoid confusing plain strings everywhere</span>\n<span class="token keyword">type</span> <span class="token class-name">Brand<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">B</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span> <span class="token keyword">readonly</span> __brand<span class="token operator">:</span> <span class="token constant">B</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">ConferenceId</span> <span class="token operator">=</span> Brand<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token string">"ConferenceId"</span><span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">TicketId</span> <span class="token operator">=</span> Brand<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token string">"TicketId"</span><span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">AttendeeId</span> <span class="token operator">=</span> Brand<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token string">"AttendeeId"</span><span class="token operator">></span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token class-name">TicketStatus</span> <span class="token operator">=</span> <span class="token string">"reserved"</span> <span class="token operator">|</span> <span class="token string">"paid"</span> <span class="token operator">|</span> <span class="token string">"canceled"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Ticket</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span>\n    <span class="token keyword">public</span> <span class="token keyword">readonly</span> conferenceId<span class="token operator">:</span> ConferenceId<span class="token punctuation">,</span>\n    <span class="token keyword">public</span> <span class="token keyword">readonly</span> attendeeId<span class="token operator">:</span> AttendeeId<span class="token punctuation">,</span>\n    <span class="token keyword">private</span> status<span class="token operator">:</span> TicketStatus <span class="token operator">=</span> <span class="token string">"reserved"</span>\n  <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n  <span class="token keyword">get</span> <span class="token function">currentStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> TicketStatus <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>status<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">!==</span> <span class="token string">"reserved"</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Can only pay reserved ticket"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token string">"paid"</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">"paid"</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Paid ticket requires refund flow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token string">"canceled"</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">static</span> <span class="token function">reserve</span><span class="token punctuation">(</span>conferenceId<span class="token operator">:</span> ConferenceId<span class="token punctuation">,</span> attendeeId<span class="token operator">:</span> AttendeeId<span class="token punctuation">)</span><span class="token operator">:</span> Ticket <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Ticket</span><span class="token punctuation">(</span>conferenceId<span class="token punctuation">,</span> attendeeId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// aggregate root</span>\n<span class="token keyword">class</span> <span class="token class-name">Conference</span> <span class="token punctuation">{</span>\n  <span class="token keyword">private</span> reservedCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">public</span> <span class="token keyword">readonly</span> tickets<span class="token operator">:</span> Ticket<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n  <span class="token function">constructor</span><span class="token punctuation">(</span>\n    <span class="token keyword">public</span> <span class="token keyword">readonly</span> id<span class="token operator">:</span> ConferenceId<span class="token punctuation">,</span>\n    <span class="token keyword">public</span> <span class="token keyword">readonly</span> title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n    <span class="token keyword">public</span> <span class="token keyword">readonly</span> capacity<span class="token operator">:</span> <span class="token builtin">number</span>\n  <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>capacity <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Capacity must be positive"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">get</span> <span class="token function">reserved</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reservedCount<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">reserveTicket</span><span class="token punctuation">(</span>attendeeId<span class="token operator">:</span> AttendeeId<span class="token punctuation">)</span><span class="token operator">:</span> Ticket <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reservedCount <span class="token operator">>=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>capacity<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Conference is full"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tickets<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>ticket <span class="token operator">=></span> ticket<span class="token punctuation">.</span>attendeeId <span class="token operator">===</span> attendeeId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Attendee </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>attendeeId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> already has a ticket</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> ticket <span class="token operator">=</span> Ticket<span class="token punctuation">.</span><span class="token function">reserve</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span> attendeeId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>reservedCount<span class="token operator">++</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>tickets<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> ticket<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(s.p,null,"Being honest, I like the results."),"\n",t.createElement(s.p,null,"In production, this would obviously be more complex - different error types, perhaps a ",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Result&lt;T, Error></code>'}})," pattern, handling edge cases like sold-out conferences with expired reservations. But even with those additional requirements, this approach maintains its elegance."),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">handleReserveRequest</span><span class="token punctuation">(</span>conferenceId<span class="token operator">:</span> ConferenceId<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> conference <span class="token operator">=</span> <span class="token keyword">await</span> conferenceRepository<span class="token punctuation">.</span><span class="token function">readById</span><span class="token punctuation">(</span>conferenceId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> ticket <span class="token operator">=</span> conference<span class="token punctuation">.</span><span class="token function">reserveTicket</span><span class="token punctuation">(</span>auth<span class="token punctuation">.</span>currentUser<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// imagine that it is API that has authentication system</span>\n  <span class="token keyword">await</span> conferenceRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>conference<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> ticket<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(s.p,null,"Nice and clean. The logic is sound, pure, and independent - it could work with different interfaces like APIs, UIs, CLIs, or even LLM tools nowadays. Business rules are explicit and encapsulated, modeling real domain requirements. Testing is straightforward."),"\n",t.createElement(s.p,null,"I wish I could write systems using this pattern."),"\n",t.createElement(s.p,null,'But. The real world would then knock on the door and say,\n"Hey, we have overbooking, conference had 2000 seats, but 2023 were registered"\nOr "Hey, customers complain that we have lost their tickets"\nOr "Our database is at capacity of the read throughput"'),"\n",t.createElement(s.p,null,"And here is where the dance begins. Because we can clearly see that the pattern here forced us to read in memory, make modifications, and then write the database changes. Or load all the related tickets with the conference, to be able to calculate the uniqueness of attendees rule."),"\n",t.createElement(s.p,null,'The typical senior developer response? "We need locking." For performance issues: "We\'ll add lazy loading to the ticket entity relations - let me write a few hundred lines of ORM configuration."'),"\n",t.createElement(s.p,null,"Whether we choose optimistic or pessimistic locking doesn't really matter - both bring significant tradeoffs. We end up building ORM magic to preserve the domain model's purity. Often, teams just accept the complexity because they need to ship features, but the core issue remains: we're adding significant system complexity solely to maintain theoretical domain model purity."),"\n",t.createElement(s.p,null,"Because of that, many, I'd guess the majority, don't use such an approach. And instead we have \"domain services\" layers."),"\n",t.createElement(s.h3,null,"Domain Services Layers"),"\n",t.createElement(s.p,null,"Here would be nice to have a rant in the style of Uncle Bob.. Sitting in the robe on terrace, ranting about those 1200 lines of code in the ConferenceService and 3000 lines of code in the ConferenceServiceTests. With big masses of code that reads, saves, validates, changes, locks, handles errors, grrr, grrr, grrr."),"\n",t.createElement(s.p,null,"I think many who worked in the industry, have seen that and understand what I'm talking about here and we've seen that code a lot.\nHere how could the above handler look like using this services approach:"),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">ConferenceService</span> <span class="token punctuation">{</span>\n  <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">handleReserveRequest</span><span class="token punctuation">(</span>conferenceId<span class="token operator">:</span> ConferenceId<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">await</span> unitOfWork<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">await</span> conferenceService<span class="token punctuation">.</span><span class="token function">trackReservation</span><span class="token punctuation">(</span>conferenceId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">const</span> ticket <span class="token operator">=</span> <span class="token keyword">await</span> ticketsService<span class="token punctuation">.</span><span class="token function">reserveTicket</span><span class="token punctuation">(</span>conferenceId<span class="token punctuation">,</span> auth<span class="token punctuation">.</span>currentUser<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> ticket<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(s.p,null,"For the sake of keeping the code size sane I'm not going to demonstrate the implementation of services.\nIt should be pretty straightforward, and nowadays it is pretty simple to get the implementation from LLMs if needed.\nThe approach itself is used pretty often, so I think a picture of a possible implementation here should quickly appear in the head."),"\n",t.createElement(s.p,null,"Don't get me wrong, this approach works. And the concept is simple to understand.\nGroup work in the ServiceClass, try to keep it free from the input / output information (like API request responses).\nInside use abstractions over storages, external APIs, queues, etc. to get the work done.\nIt is re-usable, so once an operation is implemented, it can be called in other places, so it is SOLID as well.\nTo some degree it is testable, not perfect, but it is testable. We can either create 1-20 mocks and verify that everything is called with needed parameters under test conditions.\nOr we can go with integration tests, where we most likely have most of the code not mocked, but maybe some low-level mock of third-party dependencies, like APIs."),"\n",t.createElement(s.p,null,"And most likely, I'd use it, sighing from time to time about the sizes of those services and mix of the responsibilities in it. But generically speaking it is not so bad for common day-to-day work."),"\n",t.createElement(s.h3,null,"So why not use this service approach?"),"\n",t.createElement(s.p,null,"The answer is LLMs... Trying to keep this approach with large-scale output generation by LLM could result in a situation even worse than was described above. This approach is very unconstrained, so without proper human evaluation and rework after LLM it will end up in total mess."),"\n",t.createElement(s.p,null,"And when I'm talking about LLMs, I mean here scaled output generation, usually using LLM agents, like claude code, trying to achieve a complete feature or a complete fix as result, rather than step-by-step augmented generation like pieces of code in the chats, or AI completions. With those instruments that focus on isolated context, the issues are most likely to appear as the human developer is heavily in the loop and able to do micro corrections on the go."),"\n",t.createElement(s.p,null,"But all the twitter people are saying that we need to perform X10..0..0..0? faster now and I think without autonomous or semi-autonomous agents, it is not so easy to achieve this goal."),"\n",t.createElement(s.p,null,'And I started to think, apart from custom lint rules and code scanning with focus on building a "cage" for LLM.'),"\n",t.createElement(s.p,null,'By the "cage" I mean set of rules or constraints, that from one side do not limitate LLM on the outputing the code, but from the another side, guide it automatically to the right approach for this particular project.'),"\n",t.createElement(s.p,null,"Think about as set lint rules, code verifications, tests that force architectural patterns, that are run automatically and report problems that must have a solution.\nFor instance: duplication detection, which after specific treshold of duplications fails the tool, and LLM is forced to de-duplicate the code which has been added."),"\n",t.createElement(s.p,null,"The question is if I can utilize the compiler, from one standpoint forcing LLM to follow it, and from another standpoint help bio-organisms to read and support code easier, or at least does not make it harder.\nAnd we need to keep in mind all of those technical characteristics, that are required to meet because we build distributed systems."),"\n",t.createElement(s.p,null,'So I was trying to build a middle-ground approach, which would not require a lot of quirks to keep the "purity" but at the same time, would model the domain a little bit better than with ',t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">xxService</code>'}})," architecture."),"\n",t.createElement(s.h3,null,"Requirements for results"),"\n",t.createElement(s.p,null,'Stricter architecture, with bigger separation of concerns than typical xxService architecture has.\nClearly defined system, that would empower automating architecture following rules (aka fitness functions). For instance if I want to write a lint rule that would enforce usage of specific layer of types as parameters to another layer, and protect others from being there. Typical example is to avoid usage of entities for API layer, but here I\'d like to have more low-level code rules.\nUtilization of typing system to guide and control code generation.\nMore "sound" domain modeling. Improve how domain is expressed in code, to the degree that tradeoffs with complexity and quality attributes are not needed.'),"\n",t.createElement(s.h3,null,"State-based models"),"\n",t.createElement(s.p,null,"The main idea, is to have a layer in the model that represents not only high-level domain entity, like ",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Ticket</code>'}})," but be able to express on the type level state of the entity, or even express combined states in some cases."),"\n",t.createElement(s.p,null,"Let's say a user wants to pay for the ",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Ticket</code>'}}),". We know that we can pay only for a ticket in ",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">reserved</code>'}})," state, but we should not allow to pay for the ticket if it is already ",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">paid</code>'}}),"."),"\n",t.createElement(s.p,null,"In the service layered approach we would do something like this:"),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">TicketService</span> <span class="token punctuation">{</span>\n  <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">pay</span><span class="token punctuation">(</span>ticketId<span class="token operator">:</span> ticketId<span class="token punctuation">,</span> paymentMethod<span class="token operator">:</span> PaymentMethod<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> ticket <span class="token operator">=</span> <span class="token keyword">await</span> ticketRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>ticketId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ticket<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">\'Ticket not found\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket<span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token string">\'paid\'</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">\'Ticket is already paid\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket<span class="token punctuation">.</span>state <span class="token operator">!==</span> <span class="token string">\'reserved\'</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">\'Ticket is not reserved\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> updateResult <span class="token operator">=</span> <span class="token keyword">await</span> ticketRepository<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span> state<span class="token operator">:</span> <span class="token string">\'paid\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> where<span class="token operator">:</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> ticket<span class="token punctuation">.</span>id<span class="token punctuation">,</span> state<span class="token operator">:</span> <span class="token string">\'reserved\'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>updateResult<span class="token punctuation">.</span>affected <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">\'Marking ticket as paid failed\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(s.p,null,"If we need to implement some other operation, with a ticket that could be paid, the upper part of the method would be pretty much the same. Of course as good developers, we won't copy-paste it, but rather extract it to a function, something like ",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ensureTicketIsPayable()</code>'}})," and call it everywhere where needed."),"\n",t.createElement(s.p,null,"And when we implement such logic, we just need not to forget to put a call to ",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ensureTicketIsPayable()</code>'}})," before any operation that requires the ticket to be in ",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">reserved</code>'}})," state."),"\n",t.createElement(s.p,null,"So what if we instead derive a type that represents a ticket that is in ",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">reserved</code>'}})," state?\nTypeScript is very handy here, as it could help us to express it almost effortlessly."),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token keyword">type</span> <span class="token class-name">ReservedTicket</span> <span class="token operator">=</span> Ticket <span class="token operator">&amp;</span> <span class="token punctuation">{</span> state<span class="token operator">:</span> <span class="token string">\'reserved\'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(s.p,null,"Now we can create a function that constructs such ticket:"),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">TicketsBag</span> <span class="token punctuation">{</span>\n  <span class="token keyword">async</span> <span class="token function">getReservedTicket</span><span class="token punctuation">(</span>ticketId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>ReservedTicket<span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> ticket <span class="token operator">=</span> <span class="token keyword">await</span> ticketRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>ticketId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ticket<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">\'Ticket not found\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket<span class="token punctuation">.</span>state <span class="token operator">!==</span> <span class="token string">\'reserved\'</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">\'Ticket is not reserved\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> ticket<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(s.p,null,"Now we can create a function that takes a ",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ReservedTicket</code>'}})," as an argument and performs the payment operation:"),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">pay</span><span class="token punctuation">(</span>ticket<span class="token operator">:</span> ReservedTicket<span class="token punctuation">,</span> paymentMethod<span class="token operator">:</span> PaymentMethod<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> updateResult <span class="token operator">=</span> <span class="token keyword">await</span> ticketRepository<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span> state<span class="token operator">:</span> <span class="token string">\'paid\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> where<span class="token operator">:</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> ticket<span class="token punctuation">.</span>id<span class="token punctuation">,</span> state<span class="token operator">:</span> <span class="token string">\'reserved\'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>updateResult<span class="token punctuation">.</span>affected <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">\'State conflict: marking ticket as paid failed due to outer changes\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(s.p,null,'The method now avoids most of the checks, as they are expressed within the parameter that says, "I accept only reserved tickets".\nAnd it is up to the caller to find how to construct this type when payment is needed.'),"\n",t.createElement(s.h3,null,"Let's add a bit of the system"),"\n",t.createElement(s.p,null,"Since we are controlling a very eager junior developer, LLMs, we need to add a bit of the system, to be able to implement minimal guard rails to use it correctly."),"\n",t.createElement(s.p,null,"I was trying to find appropriate layers from the clean architecture, or other architectural patterns, like entity component system (ECS) but didn't find one that would fit freely, so then I'd define the following terminology for these layers"),"\n",t.createElement(s.ul,null,"\n",t.createElement(s.li,null,"Entities - are left as is, it is our ground to map data model"),"\n",t.createElement(s.li,null,"Repositories - are responsible for persisting and retrieving entities from the data store. Pretty much common, do not see a need to invent anything special here."),"\n",t.createElement(s.li,null,"Variants - more precise shapes of domain states, like ",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ReservedTicket</code>'}})," in the example above. It could be a more narrow type on top of entities, or custom state that represents domain state, or technical primitive. I think it could be even a compound type from different states, which are tied together because they are atomic for a specific business operations"),"\n",t.createElement(s.li,null,"Resolvers - a layer on top of variants and repositories, or other data sources (API clients) that construct variant, being safe that raw data complies with a defined variant. For example ",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">TicketsBag</code>'}})," in the example."),"\n",t.createElement(s.li,null,"Capabilities - a layer on top of variants and repositories, that could describe capabilities available to execute within broad domain terms. It could be a class that groups such actions like ",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">PaymentCapabilities { markTicketAsPaid, refundTicket }</code>'}})," or one time capability like ",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ReserveConferenceTicket { performReservation }</code>'}}),". What is important is that it works mostly with variants as input, instead of entities directly, which facilitates to choose a variant and resolver to construct it, and state correctness validations before operations."),"\n"),"\n",t.createElement(s.p,null,"As you might see, those layers define rules of communication, so it is something we can use to build around validation, that rules are followed. Which will help LLMs to self-correct in case of mistakes."),"\n",t.createElement(s.h3,null,"Conclusion"),"\n",t.createElement(s.p,null,"This domain type system approach provides a middle ground between the purity of traditional DDD aggregates and the pragmatic flexibility of service layers. By leveraging TypeScript's type system to encode domain states and business rules directly into the type definitions, we create natural guard rails that both guide human developers and constrain AI code generation."),"\n",t.createElement(s.p,null,"The key benefits I've observed during my limited tests in the real world:"),"\n",t.createElement(s.p,null,t.createElement(s.strong,null,"For AI-assisted development"),": LLMs are forced to construct the correct variant types before performing operations (at least try to do it :P), which significantly reduces logic errors like mixing up entity IDs or somehow reduces errors of applying operations to invalid states. The type system acts as a compile-time safety net that catches many issues that would otherwise require careful bio-brain review or re-work."),"\n",t.createElement(s.p,null,t.createElement(s.strong,null,"For human maintainability"),": The code becomes more self-documenting. When you see a function signature like ",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">pay(ticket: ReservedTicket)</code>'}}),", you immediately understand the preconditions. The business logic is encoded in the types rather than buried in runtime checks scattered throughout service methods."),"\n",t.createElement(s.p,null,t.createElement(s.strong,null,"For performance and reliability"),": Unlike traditional DDD aggregates, this approach doesn't force you into pessimistic locking or loading entire object graphs. You can still use database-level constraints, optimistic concurrency control, and efficient queries while maintaining domain modeling benefits."),"\n",t.createElement(s.p,null,"Is this approach perfect? Certainly not. It requires more upfront investment in type modeling, and teams need to understand the conventions around variant construction and capability design. But for teams working with AI code generation at scale, or those who want domain modeling benefits without traditional DDD's performance overhead, it offers a compelling alternative."),"\n",t.createElement(s.p,null,"The real test will be how well this scales in larger codebases and whether the type-driven constraints actually improve AI code quality in practice. But early results suggest that when you make invalid states unrepresentable in the type system, both humans and AIs write more correct code by default."))}s.default=function(n){void 0===n&&(n={});const{wrapper:s}=Object.assign({},(0,e.RP)(),n.components);return s?t.createElement(s,n,t.createElement(o,n)):o(n)}},8453:function(n,s,a){a.d(s,{RP:function(){return o}});var e=a(6540);const t=e.createContext({});function o(n){const s=e.useContext(t);return e.useMemo(()=>"function"==typeof n?n(s):{...s,...n},[s,n])}}}]);
//# sourceMappingURL=component---src-pages-domain-type-system-for-typescript-mdx-1ac2e25e4d806580ea48.js.map